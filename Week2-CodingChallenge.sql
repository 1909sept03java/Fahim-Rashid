

CREATE TABLE EMPLOYEE(
    EMPLOYEE_ID INTEGER PRIMARY KEY,
    EMP_FIRSTNAME VARCHAR2(50) NOT NULL,
    EMP_LASTNAME VARCHAR2(50) NOT NULL,
    DEPARTMENT_ID INTEGER,
    SALARY NUMBER(10,2),
    EMP_EMAIL VARCHAR2(50)
);

CREATE TABLE DEPARTMENT(
    DEPARTMENT_ID INTEGER PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(50)
);


ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_EMPLOYEE_DEPARTMENT
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID);

--Create a sequence and trigger to auto-generate primary key values for both tables. 
CREATE SEQUENCE SQ_EMPLOYEE_ID
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE_ID
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ_EMPLOYEE_ID.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;

CREATE SEQUENCE SQ_DEPARTMENT_ID
START WITH 100
INCREMENT BY 50;

CREATE OR REPLACE TRIGGER TR_INSERT_DEPARTMENT_ID
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
    SELECT SQ_DEPARTMENT_ID.NEXTVAL INTO : NEW.DEPARTMENT_ID FROM DUAL;
END;

    
INSERT ALL
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME,SALARY,EMP_EMAIL) 
VALUES ('CHANDLER','BING', 80000.00, 'BING@FRIENDS.COM')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME,SALARY,EMP_EMAIL) 
VALUES ('MONICA','GELLER', 70000.00, 'MON@FRIENDS.COM')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME,SALARY,EMP_EMAIL) 
VALUES ('ROSS','GELLER', 75000.00, 'ROSS@FRIENDS.COM')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME,SALARY,EMP_EMAIL) 
VALUES ('JOEY','TRIB', 80000.00, 'JOEY@FRIENDS.COM')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME,SALARY,EMP_EMAIL) 
VALUES ('PHOEBEO','BUFFAY', 60000.00, 'PHEEBS@FRIENDS.COM')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME,SALARY,EMP_EMAIL) 
VALUES ('SMELLY','CAT', 65000.00, 'SC@FRIENDS.COM')
SELECT*FROM DUAL;

INSERT ALL
INTO DEPARTMENT (DEPARTMENT_NAME)
VALUES ('HUMAN RESOURCES')
INTO DEPARTMENT (DEPARTMENT_NAME)
VALUES ('ACCOUNTING')
INTO DEPARTMENT (DEPARTMENT_NAME)
VALUES ('CUSTOMER SUPPORT')
SELECT*FROM DUAL;

UPDATE EMPLOYEE SET DEPARTMENT_ID = 100 WHERE EMP_FIRSTNAME = 'CHANDLER';
UPDATE EMPLOYEE SET DEPARTMENT_ID = 150 WHERE EMP_FIRSTNAME = 'MONICA';
UPDATE EMPLOYEE SET DEPARTMENT_ID = 200 WHERE EMP_FIRSTNAME = 'ROSS';
UPDATE EMPLOYEE SET DEPARTMENT_ID = 100 WHERE EMP_FIRSTNAME = 'JOEY';
UPDATE EMPLOYEE SET DEPARTMENT_ID = 150 WHERE EMP_FIRSTNAME = 'PHOEBEO';
UPDATE EMPLOYEE SET DEPARTMENT_ID = 200 WHERE EMP_FIRSTNAME = 'SMELLY';

--Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID 
--and increases each employee's salary within the department by 10%, 
--and returns the new average salary for the department, 
--as well as a boolean value indicating whether the ID entered corresponds to a valid department. 

CREATE OR REPLACE PROCEDURE SP_SP_GIVE_RAISE(D_ID IN NUMBER, NEW_AVG_SALARY OUT NUMBER ,ID_BOOL OUT VARCHAR2) 
IS
D_EXISTS INTEGER;
BEGIN

SELECT COUNT(D.DEPARTMENT_ID) INTO D_EXISTS
FROM DEPARTMENT D
WHERE D.DEPARTMENT_ID = D_ID;

IF D_EXISTS>0 THEN
    UPDATE EMPLOYEE SET SALARY = SALARY*1.1
    WHERE D_ID = DEPARTMENT_ID; 
    COMMIT;
    SELECT AVG(SALARY) INTO NEW_AVG_SALARY FROM EMPLOYEE WHERE DEPARTMENT_ID = D_ID;
    ID_BOOL := 'TRUE';
ELSE
    ID_BOOL := 'FALSE';
    SELECT AVG(SALARY) INTO NEW_AVG_SALARY FROM EMPLOYEE WHERE DEPARTMENT_ID = D_ID;
END IF;
END;

DECLARE 
ID_BOOL VARCHAR(50);
NEW_AVG_SALARY NUMBER;
BEGIN
SP_SP_GIVE_RAISE(100, NEW_AVG_SALARY ,ID_BOOL);
DBMS_OUTPUT.PUT_LINE(ID_BOOL || NEW_AVG_SALARY);
END;

